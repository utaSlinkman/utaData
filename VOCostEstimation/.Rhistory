rm( list=ks())
VO <- read.csv("Variable OverheadCost  Estimation.csv".
header=TRUE)
rm( list=ls())
VO <- read.csv("Variable OverheadCost  Estimation.csv".
header=TRUE)
VO <- read.csv("Variable OverheadCost  Estimation.csv",
header=TRUE)
VO$DLH2 <- with( VO, DLH^2 )
fit1 <-lm( VO ~ DLH + DLH2, VO )
summary( fit1  )
format( summary(fit)  )
format( summary(fit1)  )
summary(fit1)
vif( fit1  )
vif( fit1  )library( vif )
library( vif )
install.packages("vif")
install.packages("VIF")
library( vif )
load(VIF)
vif( fit1  )
library(VIF)
vif( fit1  )
vif( fit1  )
?VIF
with(VO, vif(VO, DLH, DLH2))
with(VO, vif(VO, DLH, DLH2))
with(VO, vif(VO ~ DLH + DLH2))
rm( list=ls())
VO <- read.csv("Variable OverheadCost  Estimation.csv",
header=TRUE)
VO$DLH,Dev <- with( CO, DLH - mean(DLH))
VO$DLH.Dev <- with( VO, DLH - mean(DLH))
VO$DLH.Dev
VO$DLH.Dev2 <- VO$DLH.Dev2
cor( VO$DLH.Dev, VO$DLH.Dev2 )
fit2 <- lm( VO ~ VO$DLH.Dev + VO$DLH.Dev2, VO )
summary(fit2  )
fit2 <- lm( VO ~ VO$DLH.Dev + DLH.Dev2, VO )
fit2 <- lm( VO ~ DLH.Dev + DLH.Dev2, VO )
VO$DLH.Dev2 <- VO$DLH.Dev^2
fit2 <- lm( VO ~ DLH.Dev + DLH.Dev2, VO )
summary(fit2  )
rm( list=ls() )                                  # Clear memory
require( Lahman )                                # Data from Lahman sabermetric package
data( Master )                                   # Load player biography data to obtian birth year
head( Master[, 1:10])                            # Trust but verify
require( sqldf  )                                # This package allows us to use Structured Query
query <- paste( "SELECT playerId,",              # This is the SQL quesry used to locate
"birthYear,",             # Michael Youngs Master row in the Master
"nameFirst,",            # table by his first and last name.
"nameLast",
"FROM Master",
"WHERE nameLast='Young'",
"AND nameFirst='Michael'" )
YoungMaster <- sqldf( query  )
head( YoungMaster )                             # Verify answer.
data( Batting )                                  # Obtain career batting records.
head( Batting )                                  # Verify result.
query = paste( "SELECT *",                       # This query findd and loads all the yearly batting
"FROM YoungMaster,",              # rows that have Mr. Young's battingID.
"Batting",
"WHERE YoungMaster.playerID = ",
"Batting.playerID" )
YoungBatting <- sqldf( query )
View(Master)
View(Batting)
View(Master)
YoungBatting$age <-                             # Compute age for each season.
with( YoungBatting,
yearID - birthYear )
YoungBatting$OBP <-                             # Compute Young's onbase percentage.
with( YoungBatting,
( H + BB + IBB + HBP ) /
( AB + BB + IBB + HBP) )
YoungBatting$SLG <-                            # Cpmpute Young's slugging percentage.
with( YoungBatting,
( H + X2B + 2 * X3B + HR ) /
AB )
YoungBatting$OBPS <-                           # Compute Youngs onbase plus
with( YoungBatting, OBP + SLG)               # plus slugging percentage
require( ggplot2 )                             # Needed for graphics grammar plots
ggplot( YoungBatting,                          # Specify the data source
aes( x=age, y=OBPS )) +                # Set predictor and response variables.
geom_point() +                               # Plot data points.
geom_smooth( method=loess,                   # Plot loess smoother.
color="red" ) +
geom_smooth( method=lm,                      # Plot OLS quadratic estimate
formula=y~poly(x,2),
raw=TRUE,
colour="blue") +
xlab("Age") +
ylab( "Onbase percentage plus slugging" ) +
ggtitle( "Michael Young's Hitting Career"  )
YoungBatting$centeredAge <-                  # Compute centered age to minimize
quadraticFit <-                              # Fit and display fit quadratic model
lm( OBPS ~ poly( centeredAge, 2 ),
YoungBatting )
summary( quadraticFit )
YoungBatting$centeredAge <-                  # Compute centered age to minimize
with( YoungBatting, age - mean( age ))
quadraticFit <-                              # Fit and display fit quadratic model
lm( OBPS ~ poly( centeredAge, 2 ),
YoungBatting )
summary( quadraticFit )
rm( list=ls() )
library(alr4)
data(un11)
data(UN11)
UN11
UN11$logppgdp <- with( UN11, log( ppgdp ))
require(GGally)
?GGAlly
ggpairs( UN11, logppgdp, pctUrban, fertility  )
UN11$logppgdp
ggpairs( UN11, c( "logppgdp", "pctUrban", "fertility"  )
)
ggpairs( UN11, c( 7, 6, 3  ))
UN11$Fertiltiy <- with( UN11, log(fertiltiy) )
UN11$Fertiltiy <- with( UN11, log(fertility) )
require(GGally)
ggpairs( UN11, c( 7, 6, 8 ))
# alr4
rm( list=ls() )
library(alr4)
data(UN11)
UN11$logppgdp <- with( UN11, log( ppgdp ))
UN11$logFertiltiy <- with( UN11, log(fertility) )
require(GGally)
ggpairs( UN11, c( 7, 6, 8 ))
# alr4
rm( list=ls() )
library(alr4)
data(UN11)
UN11$logPpgdp <- with( UN11, log( ppgdp ))
UN11$logFertiltiy <- with( UN11, log(fertility) )
require(GGally)
ggpairs( UN11, c( 7, 6, 8 ))
