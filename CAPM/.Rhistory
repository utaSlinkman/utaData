?pacckrat
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f <- function(x) {
browser()
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
cube <- function(x, n) {
x^3
}
cube(3)
cube(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
require(httr)
install.packages("json")
install.packages("jason")
require( httr )
require( rjson )
install.packages("rjson")
require( jsonlite )
require( httr )
require( rjson )
require( jsonlite )
oauth_endpoints("github")
clientId     <- "df67b09d9b26c3b19587"
ClientSecret <- "e95c352b49f7a0f60e465460e7fdf5b8377b02af"
clientId     <- "df67b09d9b26c3b19587"
ClientSecret <- "e95c352b49f7a0f60e465460e7fdf5b8377b02af"
id     <- "df67b09d9b26c3b19587"
secret <- "e95c352b49f7a0f60e465460e7fdf5b8377b02af"
myapp <- oauth_app("github",
key = id,
clientSecret = secret )
rm(llist=ls())
require( httr )
require( rjson )
require( jsonlite )
oauth_endpoints("github")
clientId     <- "df67b09d9b26c3b19587"
clientSecret <- "e95c352b49f7a0f60e465460e7fdf5b8377b02af"
rm(llist=ls())
require( httr )
require( rjson )
require( jsonlite )
oauth_endpoints("github")
clientId     <- "df67b09d9b26c3b19587"
clientSecret <- "e95c352b49f7a0f60e465460e7fdf5b8377b02af"
myapp <- oauth_app("github",
key = clientId,
secret = clientSecret )
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
x <- list( a=1:5, b=norm( 10))
x <- list( a=1:5, b=rnorm( 10))
x
laaply(  x  )
lapply(  x  )
x <- list( a=1:5, b=rnorm( 10))
x
lapply(  x  )
lapply(  x, mean  )
?gl
data(iris)
iris[,c(1,5)]
sapply( iris[,c(1,5)], mean,by=Species )
sapply
?sapply
sapply( iris[,c(1,5)], mean, Species )
sapply( iris[,c(1,5)], mean, iris$Species )
sapply( iris, mean )
sapply( iris, summary )
iris[, iris$species=="virginica"]
iris[,4]
iris[,5]
iris[, iris$Species=="virginica"]
iris[, iris$Species==3]
seperate( iris, Species)
iris[,]
iris[,iris$Species=="virginica"]
require(plyr)
?"plyr"
?aggregate
aggregate( Sepal.Length~Species, iris, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
summary( iris )
data(mtcars)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
?tapply
with(mtcars, sapply(mpg, cyl, mean))
mtcars[mtcars==4,2]
mtcars[mtcars==4,]
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(mpg, cyl, mean))
t <- with(mtcars, tapply(mpg, cyl, mean))
mpg <- as.vector( t )
mpg[8] - mpg[4]
mpg[3] - mpg[1]
mpg[1] - mpg[3]
?debug
ls()
debug(ls)
ls()
q
?apply
install.packages("Rcmdr")
?Rcmdr
library(Rcmdr)
install.packages("gtable")
library(Rcmdr)
RCommander()
RCmdr()
?"Rcmdr"
exit
library(Rcmdr)
require(Rcmdr)
library(Rcmdr)
Rcmdr()
Rcommander()
library(Rcmdr)
library(Rcmdr)
install.packages("ggplot2")
library(Rcmdr)
?"alr4"
library(Rcmdr)
pima <- read . table (" http :// archive .ics .
uci.edu/ml/ machine - learning - databases
/pima - indians - diabetes /pima - indians -
diabetes . data ", header=F, sep=",")
pima <- read . table (" http :// archive .ics .
uci.edu/ml/ machine - learning - databases
/pima - indians - diabetes /pima - indians -
diabetes . data ", header=F, sep=",")
demand <- 1000         # Units per year
costPerOrder <- 2      # Cost per order
holdingCost <- 0.16   #Cost to hold an item in inverntory per year
# We compute the EOQ using the following expression:
EOQ <- sqrt( 2*demand * holdingCost / costPerOrder )
EOQ <- sqrt( 2*demand *cistPerOrder / hodingCost )
EOQ <- sqrt( 2*demand * costPerOrder / hodingCost )
0.08*2
2 * 1000 * 2
4000/0.16
sqrt(25000)
EOQ <- sqrt( 2 * demand * costPerOrder / hodingCost
)
demand <- 10000        # Units per year
costPerOrder <- 2      # Cost per order
holdingCost <- 0.16   #Cost to hold an item in inverntory per year
# We compute the EOQ using the following expression:
EOQ <- sqrt( 2 * demand * costPerOrder / hodingCost
)
EOQ <- sqrt( 2 * demand * costPerOrder / holdingCost )
( EOQ <- sqrt( 2 * demand * costPerOrder / holdingCost ) )
foodItem
extension
Order <- data.frame(  foorDtem, quantity, price  )
with( Order, sum( quantity * price ))
with( Order, sum( quantity * price )) / 4
require( qunatmod )                  # Needed for getSymbols's function
require( quantmod )                  # Needed for getSymbols's function
Date()
date()
today()
today <- date()
today.months()
months( today)
today <- date()
months.Date()
now <- POSIXlt()
?`POSIXlt-class`
now <- POSIXlt( date() )
now <- POSIXct( date() )
yesterday <- date() - 1
today <- date()
dateVector <- strplot( today, fiexed=TRUE)
dateVector <- strsplt( today, fixed=TRUE)
dateVector <- strspilt( today, split=" ", fixed=TRUE)
dateVector <- strsplit( today, split=" ", fixed=TRUE)
dateVector <- strsplit( today, split=" ", fixed=TRUE)[[1]]
month.name
numbers <- 1:12
names <- minth.name
names <- month.name
require( data.table )
numbers <- 1:12
names <- month.name
MT <- data.table( numbers, names)
?setkey
setkey( MT, names)
tables()
mt[ "Sep" ]
MT[ "Sep", ]
MT
tables()
MT[ "Sep", numbers ]
MT[ "Sep", list( numbers) ]
MT
MT <- MT[order(MT$name),]
MT <- data.frame( number, name)
number <- 1:12
name <- month.name
MT <- data.frame( number, name)
MT <- MT[order(MT$name),]
MT
MT <- data.frame(name, number )
MT <- MT[order(MT$name),]
MT
MT["Sep",]
month.abb
number <- 1:12
name <- month.abb
MT <- data.frame(name, number )
MT <- MT[order(MT$name),]
MT
MT["Sep",2]
MT[ "Sep" ]
today <- date()
dateVector <- strsplit( today, split=" ", fixed=TRUE)[[1]]
parsedDate <- strsplit( today, split=" ", fixed=TRUE)[[1]]
today <- date()
parsedDate <- strsplit( today, split=" ", fixed=TRUE)[[1]]
mm <- parsedDate[3]
MT[ MT$name == mm, 2 ]
MT[ MT$name == mm,  ]
size <- c( 30.1, 37.4, 18.3, 16.4, 7.2, 2.5, 1.4 )
sum(size)
size[-1]
sum(size)
size
size <= size[-1]
sum(size)
size
size[-1]
size <- size[-1]
size
sum(size)
size <- 30.1, size)
size <- (30.1, size)
size <- c(30.1, size)
sum(size)
sum( ize/sum(size))
sum( size/sum(size))
p <- size/sum(size)
p
sum(p)
length(p)
people <- 1:7
length(people)
mu <- sum( p * size )
mu
size
people * p
sum( people * p )
rpois( 1000, 1.52 ) + 1
mean( rpois( 1000, 1.52 ) + 1)
iqr=18.20-13.90
iqr=18.20-14.20
iqr
IQR
iqr
iqr <- 18.20 - 14.20
iqr
iqr
iqr <- 18.20 - 14.30
iqr
Q3 + 1.5 * IQR
Q3 + 1.5 * IQRQ3=18.20
Q3 + 1.5 * IQR
Q3 <- 18.20
Q3 + 1.5 * 3.9
14.30-1.5*3.90
revenue <- c( 1976, 2106, 1695, 1011,
678,	 788,  893,	1114,
255,  978, 1031,	2191 )
revenue <- c( 1976, 2106, 1695, 1011,
678,	 788,  893,	1114,
255,  978, 1031,	2191 )
( ybar <- round( revenue ))
( s=sd( revenue ))
revenue <- c( 1976, 2106, 1695, 1011,
678,	 788,  893,	1114,
255,  978, 1031,	2191 )
( ybar <- round( revenue ))
( s=round( sd( revenue )))
( ybar <- round( mean(revenue) ))
25.725 + 0.132*32
Tips <-
read.csv( "http://www.lock5stat.com/datasets/RestaurantTips.csv" )
head( Tips)
tail( Tips)
require(ggplot2)
ggplot(Tips,
aes(x=Credit, y=PctTip)) +
geom_boxplot()
require( Lahman )
install.packages("Lahman")
require( Lahman )
?"Lahman"
data(Teams)
head(Teams)
Teams$OBP <- ( H + BB + HBP ) / ( AB + BB + HBP )
Teams$OBP <- with( Teams, ( H + BB + HBP ) / ( AB + BB + HBP ))
Teams <- Teams[ Teams$yearID >= 1980, ]
mean( OBP )
mean( Teams$OBP )
Teams <- Teams[ Teams$yearID >= 1990, ]
mean( Teams$OBP )
Teams <- Teams[ Teams$yearID >= 2000, ]
mean( Teams$OBP )
require( ggplot2 )
ggplot( Teams, aes( x=OBP, y=R)) +
geom_point()
fit <- lm( w ~ OBP, Teams )
fit <- lm( W ~ OBP, Teams )
summary(fit)
fit <- lm( W ~ OBP+ERA, Teams )
summary(fit)
fit <- lm( W ~ lgID + OBP+ERA, Teams )
summary(fit)
fit <- lm( W ~ factor(lgID) + OBP+ERA, Teams )
summary(fit)
fit <- lm( W ~ factorlgID + OBP+ERA, Teams )
fit <- lm( W ~ lgID + OBP+ERA, Teams )
fit <- lm( W ~ lgID + OBP+ERA, Teams )
summary(fit)
fit <- lm( W ~ lgID + lgID * OBP+ lgID * ERA, Teams )
summary(fit)
nhFit <- lm( W ! lgID + OBP + ERA, Teams )
summary(nhFit)
ahFit <- lm( W ~ lgID + lgID * OBP+ lgID * ERA, Teams )
summary(ahFit)
anova(ngFit, asFit )
anova(nhFit, asFit )
nhFit <- lm( W ! lgID + OBP + ERA, Teams )
summary(nhFit)
ahFit <- lm( W ~ lgID + lgID * OBP+ lgID * ERA, Teams )
summary(ahFit)
anova( nhFit, ahFit )
nhFit <- lm( W ! lgID + OBP + ERA, Teams )
nhFit <- lm( W ~ lgID + OBP + ERA, Teams )
summary(nhFit)
ahFit <- lm( W ~ lgID + lgID * OBP+ lgID * ERA, Teams )
summary(ahFit)
anova( nhFit, ahFit )
xy <- with( Teams, cbind( W, ERA ))
cor(x,y)
cor(W, ERA )
xy
cor(xy)
require( Lahman )
data(Teams)
head(Teams)
Teams$OBP <- with( Teams, ( H + BB + HBP ) / ( AB + BB + HBP ))
Teams <- Teams[ Teams$yearID >= 2000, ]
mean( Teams$OBP )
require( ggplot2 )
ggplot( Teams, aes( x=OBP, y=R)) +
geom_point()
nhFit <- lm( W ~ lgID + OBP + ERA, Teams )
summary(nhFit)
ahFit <- lm( W ~ lgID + lgID * OBP+ lgID * ERA, Teams )
summary(ahFit)
anova( nhFit, ahFit )
xy <- with( Teams, cbind( W, ERA ))
cor(W, ERA )
require( Lahman )
data(Teams)
head(Teams)
Teams$OBP <- with( Teams, ( H + BB + HBP ) / ( AB + BB + HBP ))
Teams <- Teams[ Teams$yearID >= 2000, ]
mean( Teams$OBP )
require( ggplot2 )
ggplot( Teams, aes( x=OBP, y=R)) +
geom_point() +
geom_smooth(  method=lm, color="blue" ) +
nhFit <- lm( W ~ lgID + OBP + ERA, Teams )
summary(nhFit)
ahFit <- lm( W ~ lgID + lgID * OBP+ lgID * ERA, Teams )
summary(ahFit)
anova( nhFit, ahFit )
xy <- with( Teams, cbind( W, ERA ))
cor(W, ERA )
require( Lahman )
require( sqldf )
install.packages("sqldf")
require( sqldf )
install.packages("gsubf")
data(mtcarw)
data(mtcars)
shapiro.wilk
shapiro.test
?.Call
Date("8/31/2011
")
Date("8/31/2011")
date("8/31/2011")
?"date"
?"Date-class"
pnorm( 0, 0, 1 )
?pnorm
qnorm( 0.25, 0, 1)
qnorm( 0.25, 580, 70)
install.packages("RSQLite")
setwd("C:/Users/Craig/utaData/CAPM")
